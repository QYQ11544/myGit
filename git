git:目前最先进的分布式版本控制系统。
CVS、SVN免费的版本控制系统。集中式的版本控制系统速度慢，而且必须联网才能使用。linus选择使用商业版本的bitKeeper,授权Linux社区免费使用版本控制系统，开发Samba的Andrew视图破解bitKeeper的协议。2008年，Github网站上线，为开源项目免费提供git存储，Jquery，PHP,Ruby牵到Github。

集中式的版本控制系统必须连接网络。
而分布式版本控制系统没有“中央服务器”，每一个人的电脑都是一个完整的版本库，
CVS作为最早的开源免费的集中式版本控制系统。SVN修正CVS的稳定性问题，是目前使用最多的集中式版本控制系统。
    除了免费的集中式版本控制系统，还有IBM的ClearCase.
    微软自己的集中式版本控制系统VSS，集成在visual Studio 
    分布式版本控制系统除了git，bitKeeper, mercurial bazaar.
 注意：版本控制系统，只能在跟踪文本文件的改动，而图片视频这些二进制文件虽然可以由版本控制系统管理，但没办法跟踪文件的变化。只能把二进制文件每次改动串起来，具体改的什么不清楚。而且注意，Microsoft的word格式是二进制格式。

 将一个文件放入仓库需要一下步骤：
 $ git add file //执行上面的命令，Unix哲学是：没有消息就是好消息。
 $ git commit -m "wrete a readme file" /* git commit －m:后面输入的是本次提交的说明。可以输入任何内容。*/

$git status :让我们时刻掌握仓库当前的状态。
$git diff :查看difference,显示的格式是unix 通用的diff格式。

知道了<file>文件的修改后，再将其提交到仓库，
$ git add <file>
$git reset --hard HEAD^ //将文件返回到上一个版本
HEAD^:上一个版本
HEAD^^:上上一个版本
HEAD-100：表示往上100个版本。
$ git reset --hard 61b9f3f //指定回到未来那个版本
其中commit is（版本号）是SHA1计算出来的十六进制表示的数字。
    总结：
        ：HEAD指向的版本就是当前版本，因此，Git允许我们在版本历史之间穿梭，使用命令git reset --hard commit_id.
: 穿梭前，用git log可以查看提交历史，以便确定要会退的那个版本
：要重返未来，用git relog查看命令历史，以便确定要会退到未来的那个版本。

·········工作区和暂存区··············
：工作区：（working Directory）~/myGit 文件夹就是一个工作区
：版本库（Repository）：.git隐藏目录是Git的版本库。其中最重要的文件index的暂存区，其中Git自动创建了第一个分支master,以及指向master 的一个指针叫Head.
    git  add <file>将文件修改添加到暂存区
    git  commit <file> 将暂存区的所有内容提交到当前分支
    我们创建git版本库时，git自动为我们创建唯一一个msater分支，git commit就是往master分支上提交更改。


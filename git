git:目前最先进的分布式版本控制系统。
CVS、SVN免费的版本控制系统。集中式的版本控制系统速度慢，而且必须联网才能使用。linus选择使用商业版本的bitKeeper,授权Linux社区免费使用版本控制系统，开发Samba的Andrew视图破解bitKeeper的协议。2008年，Github网站上线，为开源项目免费提供git存储，Jquery，PHP,Ruby牵到Github。

集中式的版本控制系统必须连接网络。
而分布式版本控制系统没有“中央服务器”，每一个人的电脑都是一个完整的版本库，
CVS作为最早的开源免费的集中式版本控制系统。SVN修正CVS的稳定性问题，是目前使用最多的集中式版本控制系统。
    除了免费的集中式版本控制系统，还有IBM的ClearCase.
    微软自己的集中式版本控制系统VSS，集成在visual Studio 
    分布式版本控制系统除了git，bitKeeper, mercurial bazaar.
 注意：版本控制系统，只能在跟踪文本文件的改动，而图片视频这些二进制文件虽然可以由版本控制系统管理，但没办法跟踪文件的变化。只能把二进制文件每次改动串起来，具体改的什么不清楚。而且注意，Microsoft的word格式是二进制格式。

 将一个文件放入仓库需要一下步骤：
 $ git add file //执行上面的命令，Unix哲学是：没有消息就是好消息。
 $ git commit -m "wrete a readme file" /* git commit －m:后面输入的是本次提交的说明。可以输入任何内容。*/

$git status :让我们时刻掌握仓库当前的状态。
$git diff :查看difference,显示的格式是unix 通用的diff格式。

知道了<file>文件的修改后，再将其提交到仓库，
$ git add <file>
$git reset --hard HEAD^ //将文件返回到上一个版本
HEAD^:上一个版本
HEAD^^:上上一个版本
HEAD-100：表示往上100个版本。
$ git reset --hard 61b9f3f //指定回到未来那个版本
其中commit is（版本号）是SHA1计算出来的十六进制表示的数字。
    总结：
        ：HEAD指向的版本就是当前版本，因此，Git允许我们在版本历史之间穿梭，使用命令git reset --hard commit_id.
: 穿梭前，用git log可以查看提交历史，以便确定要会退的那个版本
：要重返未来，用git relog查看命令历史，以便确定要会退到未来的那个版本。

·········工作区和暂存区··············
：工作区：（working Directory）~/myGit 文件夹就是一个工作区
：版本库（Repository）：.git隐藏目录是Git的版本库。其中最重要的文件index的暂存区，其中Git自动创建了第一个分支master,以及指向master 的一个指针叫Head.
    git  add <file>将文件修改添加到暂存区
    git  commit <file> 将暂存区的所有内容提交到当前分支
    我们创建git版本库时，git自动为我们创建唯一一个msater分支，git commit就是往master分支上提交更改。
 咱存取概念很重要。
 ·············管理和修改··················
 git 跟踪并管理的是修改，而非文件。
 git跟踪修改，每次修改，如果不add到暂存区，那就不会加入到commit中。
 ···············
 $ git checkout -- readme.txt :就是将readme.txt文件再工作区的修改全部撤销。
    1.readme.txt自修改后还没有被放到暂存区，现在，撤销修改就会到和版本一样的状态。
    2.readme.txt 已经添加到暂存区后，又做了修改，现在，撤销修改就回到暂存区后的状态。
    总之，这个文件回到最近一次git commit 或git add时的状态。
    注意：git checkout -- <file> 命令中的－－很重要，没有--，就变成了“创建一个新分支“的命令，我们再后面的分之管理中会再次遇到git checkout命令。
    总结：
    1.当你论改工作区某个文件的内容，想直接丢弃工作区的修改时，用命令：git checkout -- file 
    2.当你不但论改工作区某个文件的内容，还添加到暂存区时，想丢掉修改，分两步，第一步用命令git reset HEAD file .就回到场景1中，第二部按照场景1操作。
    3.已经提交不合适的修改到版本库中，想要撤销本次提交，参考版本回退。
：···················删除文件····························
$ git add test.txt //添加一个测试文件
$ git commit -m "add test.txt" //并且提交到版本库
$ rm test.txt //删除工作区文件
$ git status //因此工作区和版本库就不一致，git status命令显示哪些文件被删除
    ·1.第一中情况：确实要从版本库中删除该文件，就使用一下命令删除
        $ git rm test.txt //删除版本库中的文件
        $ git commit -m "remove test.txt"//文件就从版本库中被删除
    ·2.另一种情况，文件被错删：因为版本库中还有备份，所以含容易把误删的文集那恢复到最新的版本。
        $ git checkout -- test.txt //git checkout 就是用版本库里面的版本替换工作区的版本。但是，只能恢复到最新版本，会丢失最近一次提交后修改的内容。

远程仓库
从现在起，只要本地作出提交，就可以通过一下命令
    $git push origin master //将本地master分支的最新修改推送到Github。
    总结：要关联一个远程库：使用命令 git remote add origin git@server-name:path/repo-name.git
    关联后，使用命令git push -u origin master第一次推送master分支的所有内容。
    以后修改都可以使用 git push origin master 推送最新修改。
    分布式版本系统的最大好处之一就是再本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是无法工作的。
从远程仓库克隆
$ git clone  git@github.com:QYQ11544/Git_Hacker.git//使用git clone 克隆一个本地库
注意：GitHub 给出协议不止一种，支持SSh HTTPS subversion 默认git://使用的ssh 协议。
总结：要克隆一个仓库，首先需要知道仓库的地址，然后使用git clone命令克隆。
git支持多种协议，包括https 但通过ssh支持的原生git速度最快。
创建与合并分支
$ git checkout -b dev //创建dev分支，然后切换到dev分支：
    get checkout 命令加上-b 参数表示创建并切换，相当于一下两条命令。
        $ git branch dev 
        $ git checkout dev 
$ git branch //使用git branch 命令查看当前分支：
    git branch  命令会列出所有分支，当前分支前会出现·号。
$ git checkout master  //dev 分支工作完成，我们就可以切换到master分支。
$ git merge dev //我们把dev分支的工作成果合并到master分支上。
    git merge 命令用于合并指定分支到当前分支，
$ git branch -d dev //合并完成后，就可以放心地删除dev分支。
$ git branch //删除完成后查看分支信息。
    总结：查看分支：git branch 
          创建分支：git branch <name>
          切换分支: git checkout <name>
          创建＋切换分支：git checkout -b <name>
          合并某个分支到当前分支：git merge <name>
          删除分支: git branch -d <name>

解决冲突
$ git checkout -b featurel //创建新分支featurel
$ git add readme.txt 
$ git commit -m "AND simple" //在featurel 分之上提交
$ git checkout master //切换到master分支
$ git add readme.txt 
$ git commit -m "& simple" 
//现在master分支和featurel分支各自都有新的提交。
$ git merge featurel //git试图进行快速合并。但合并会出现冲突
$ cat readme.txt //可以直接查看readme.txt内容
修改然后再次提交
$ git add readme.txt 
$ git commit -m "conflict fixed" 
$ git log --graph --pretty=oneline --abbrev-commit //使用带参数的git log 查看分支合并情况。
$ git branch -d featurel //删除featurel分支
总结：Git 无法自动合并分支，就必须首先解决冲突，解决冲突后，再提交，合并。
分支管理策略
git如果使用fast forward模式，删除分支后，将会丢掉分支信息。
如果强制禁用Fast forward模式，git 就会再merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
$ git merge --no-ff -m "merge with no-ff" dev //--no-ff参数用于普通模式合并，合并后的历史有分支，能看出来曾经做过合并。fast forward 合并并不能体现分支合并信息。

分支策略：
    再实际开发中，我们按照一下几个基本原则进行分支管理：
    首先：master分支应该时非常稳定的，也就是仅仅用来发布新版本，平时不能再上面做修改。
然后创建新的dev分支，dev分支应该作为平时的开发工作。
同用户组每个成员都有自己的分支，然后定期往dev分支上合并即可。

  Bug 分支 
$ git stash //可以把当前工作现场储藏起来，以后还可以恢复现场
$ git stash list // 查看stash列表
现场工作还在，git把status内容存在某个地方
 1. git stash apply 恢复，stash内容并不删除，你需要使用git stash drop 来删除。
 2. git stash pop ，恢复的同时把stash内容也删除。
如果多次stash,恢复时，先使用git stash list 查看，然后恢复指定的stash。
$ git stash apply stash@{0} 
总结：修复bug时，我们会通过创建bug分支进行修复，然后合并，最后删除
当手头工作没有完成，可以先把工作现场git stash 一下，然后区修复bug，修复后，再git stash pop ，回到工作现场。
多人协作
$ git remote //查看远程库的信息
$ git remote -v //查看更详细的信息
origin https://github.com/QYQ11544/myGit.git (fetch)//可以抓取origin的地址
origin https://github.com/QYQ11544/myGit.git (push)//可以推送的origin的地址

